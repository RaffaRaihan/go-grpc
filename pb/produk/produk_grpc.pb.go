// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: protos/produk.proto

package produk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductClient_GetProduks_FullMethodName   = "/go_grpc.ProductClient/GetProduks"
	ProductClient_GetProduk_FullMethodName    = "/go_grpc.ProductClient/GetProduk"
	ProductClient_CreateProduk_FullMethodName = "/go_grpc.ProductClient/CreateProduk"
	ProductClient_UpdateProduk_FullMethodName = "/go_grpc.ProductClient/UpdateProduk"
	ProductClient_DeleteProduk_FullMethodName = "/go_grpc.ProductClient/DeleteProduk"
)

// ProductClientClient is the client API for ProductClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClientClient interface {
	GetProduks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Product, error)
	GetProduk(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error)
	CreateProduk(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Id, error)
	UpdateProduk(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error)
	DeleteProduk(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type productClientClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClientClient(cc grpc.ClientConnInterface) ProductClientClient {
	return &productClientClient{cc}
}

func (c *productClientClient) GetProduks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductClient_GetProduks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClientClient) GetProduk(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductClient_GetProduk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClientClient) CreateProduk(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, ProductClient_CreateProduk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClientClient) UpdateProduk(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, ProductClient_UpdateProduk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClientClient) DeleteProduk(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, ProductClient_DeleteProduk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductClientServer is the server API for ProductClient service.
// All implementations must embed UnimplementedProductClientServer
// for forward compatibility.
type ProductClientServer interface {
	GetProduks(context.Context, *Empty) (*Product, error)
	GetProduk(context.Context, *Id) (*Product, error)
	CreateProduk(context.Context, *Product) (*Id, error)
	UpdateProduk(context.Context, *Product) (*Status, error)
	DeleteProduk(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedProductClientServer()
}

// UnimplementedProductClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductClientServer struct{}

func (UnimplementedProductClientServer) GetProduks(context.Context, *Empty) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduks not implemented")
}
func (UnimplementedProductClientServer) GetProduk(context.Context, *Id) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduk not implemented")
}
func (UnimplementedProductClientServer) CreateProduk(context.Context, *Product) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduk not implemented")
}
func (UnimplementedProductClientServer) UpdateProduk(context.Context, *Product) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduk not implemented")
}
func (UnimplementedProductClientServer) DeleteProduk(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduk not implemented")
}
func (UnimplementedProductClientServer) mustEmbedUnimplementedProductClientServer() {}
func (UnimplementedProductClientServer) testEmbeddedByValue()                       {}

// UnsafeProductClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductClientServer will
// result in compilation errors.
type UnsafeProductClientServer interface {
	mustEmbedUnimplementedProductClientServer()
}

func RegisterProductClientServer(s grpc.ServiceRegistrar, srv ProductClientServer) {
	// If the following call pancis, it indicates UnimplementedProductClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductClient_ServiceDesc, srv)
}

func _ProductClient_GetProduks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductClientServer).GetProduks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductClient_GetProduks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductClientServer).GetProduks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductClient_GetProduk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductClientServer).GetProduk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductClient_GetProduk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductClientServer).GetProduk(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductClient_CreateProduk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductClientServer).CreateProduk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductClient_CreateProduk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductClientServer).CreateProduk(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductClient_UpdateProduk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductClientServer).UpdateProduk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductClient_UpdateProduk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductClientServer).UpdateProduk(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductClient_DeleteProduk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductClientServer).DeleteProduk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductClient_DeleteProduk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductClientServer).DeleteProduk(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductClient_ServiceDesc is the grpc.ServiceDesc for ProductClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc.ProductClient",
	HandlerType: (*ProductClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduks",
			Handler:    _ProductClient_GetProduks_Handler,
		},
		{
			MethodName: "GetProduk",
			Handler:    _ProductClient_GetProduk_Handler,
		},
		{
			MethodName: "CreateProduk",
			Handler:    _ProductClient_CreateProduk_Handler,
		},
		{
			MethodName: "UpdateProduk",
			Handler:    _ProductClient_UpdateProduk_Handler,
		},
		{
			MethodName: "DeleteProduk",
			Handler:    _ProductClient_DeleteProduk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/produk.proto",
}
